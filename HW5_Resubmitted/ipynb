{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNAUoP/ysV6r4dgfp0bB63C",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/avawaxenberg/FDSfE_AWaxenberg/blob/main/HW5_Resubmitted/ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "K1B0e5cf7d38"
      },
      "outputs": [],
      "source": [
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distance_nearest_MRT_station = pd.read_csv(\"https://github.com/fedhere/FDSfE_FBianco/raw/main/data/Real_estate.csv\")"
      ],
      "metadata": {
        "id": "EfU3xjRA9oIX"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "distance_nearest_MRT_station.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "s4mgIjjn9zlk",
        "outputId": "907791db-95cd-4c63-f0ee-e9df3caca76b"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   transaction_date  house_age  distance_nearest_MRT_station  \\\n",
              "0          2012.917       32.0                      84.87882   \n",
              "1          2012.917       19.5                     306.59470   \n",
              "2          2013.583       13.3                     561.98450   \n",
              "3          2013.500       13.3                     561.98450   \n",
              "4          2012.833        5.0                     390.56840   \n",
              "\n",
              "   convenience_stores  house_price_unit_area  \n",
              "0                  10                   37.9  \n",
              "1                   9                   42.2  \n",
              "2                   5                   47.3  \n",
              "3                   5                   54.8  \n",
              "4                   5                   43.1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f3d3db45-c514-4332-ba36-9fa201cf47d0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>transaction_date</th>\n",
              "      <th>house_age</th>\n",
              "      <th>distance_nearest_MRT_station</th>\n",
              "      <th>convenience_stores</th>\n",
              "      <th>house_price_unit_area</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2012.917</td>\n",
              "      <td>32.0</td>\n",
              "      <td>84.87882</td>\n",
              "      <td>10</td>\n",
              "      <td>37.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2012.917</td>\n",
              "      <td>19.5</td>\n",
              "      <td>306.59470</td>\n",
              "      <td>9</td>\n",
              "      <td>42.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2013.583</td>\n",
              "      <td>13.3</td>\n",
              "      <td>561.98450</td>\n",
              "      <td>5</td>\n",
              "      <td>47.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2013.500</td>\n",
              "      <td>13.3</td>\n",
              "      <td>561.98450</td>\n",
              "      <td>5</td>\n",
              "      <td>54.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2012.833</td>\n",
              "      <td>5.0</td>\n",
              "      <td>390.56840</td>\n",
              "      <td>5</td>\n",
              "      <td>43.1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f3d3db45-c514-4332-ba36-9fa201cf47d0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f3d3db45-c514-4332-ba36-9fa201cf47d0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f3d3db45-c514-4332-ba36-9fa201cf47d0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distance_nearest_MRT_station.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "xIKb7acL-zyg",
        "outputId": "c00a2413-b8d5-47fb-d964-bafd0ef08b47"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     transaction_date  house_age  distance_nearest_MRT_station  \\\n",
              "409          2013.000       13.7                    4082.01500   \n",
              "410          2012.667        5.6                      90.45606   \n",
              "411          2013.250       18.8                     390.96960   \n",
              "412          2013.000        8.1                     104.81010   \n",
              "413          2013.500        6.5                      90.45606   \n",
              "\n",
              "     convenience_stores  house_price_unit_area  \n",
              "409                   0                   15.4  \n",
              "410                   9                   50.0  \n",
              "411                   7                   40.6  \n",
              "412                   5                   52.5  \n",
              "413                   9                   63.9  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6a335b55-b80b-4363-991d-1cf21d37c090\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>transaction_date</th>\n",
              "      <th>house_age</th>\n",
              "      <th>distance_nearest_MRT_station</th>\n",
              "      <th>convenience_stores</th>\n",
              "      <th>house_price_unit_area</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>409</th>\n",
              "      <td>2013.000</td>\n",
              "      <td>13.7</td>\n",
              "      <td>4082.01500</td>\n",
              "      <td>0</td>\n",
              "      <td>15.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>410</th>\n",
              "      <td>2012.667</td>\n",
              "      <td>5.6</td>\n",
              "      <td>90.45606</td>\n",
              "      <td>9</td>\n",
              "      <td>50.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>411</th>\n",
              "      <td>2013.250</td>\n",
              "      <td>18.8</td>\n",
              "      <td>390.96960</td>\n",
              "      <td>7</td>\n",
              "      <td>40.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>412</th>\n",
              "      <td>2013.000</td>\n",
              "      <td>8.1</td>\n",
              "      <td>104.81010</td>\n",
              "      <td>5</td>\n",
              "      <td>52.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>413</th>\n",
              "      <td>2013.500</td>\n",
              "      <td>6.5</td>\n",
              "      <td>90.45606</td>\n",
              "      <td>9</td>\n",
              "      <td>63.9</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a335b55-b80b-4363-991d-1cf21d37c090')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6a335b55-b80b-4363-991d-1cf21d37c090 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6a335b55-b80b-4363-991d-1cf21d37c090');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distance_nearest_MRT_station.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XhV55nOB-2Cj",
        "outputId": "ae60c731-1871-4108-ebaf-e4416b633ae5"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 414 entries, 0 to 413\n",
            "Data columns (total 5 columns):\n",
            " #   Column                        Non-Null Count  Dtype  \n",
            "---  ------                        --------------  -----  \n",
            " 0   transaction_date              414 non-null    float64\n",
            " 1   house_age                     414 non-null    float64\n",
            " 2   distance_nearest_MRT_station  414 non-null    float64\n",
            " 3   convenience_stores            414 non-null    int64  \n",
            " 4   house_price_unit_area         414 non-null    float64\n",
            "dtypes: float64(4), int64(1)\n",
            "memory usage: 16.3 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distance_nearest_MRT_station.plot('house_age', 'house_price_unit_area', kind=\"scatter\");"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "id": "6M2CB9_Z-9dN",
        "outputId": "4833f8ea-8ef6-47d5-e193-db1c9800ef44"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distance_nearest_MRT_station.plot('distance_nearest_MRT_station', 'house_price_unit_area', kind=\"scatter\");"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "id": "NwNCRbpv_oNv",
        "outputId": "2c101ecb-6b27-4622-ab0a-047d3be8c6f1"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features = distance_nearest_MRT_station[[\"house_age\", \"convenience_stores\", \"transaction_date\", \"distance_nearest_MRT_station\"]]\n",
        "target = distance_nearest_MRT_station[\"house_price_unit_area\"]"
      ],
      "metadata": {
        "id": "0WB_cf42_zPZ"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IBeGO1ZKAJUK",
        "outputId": "c16b9a35-cf14-4594-f08b-21d89fdd4f92"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(414, 4)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "target.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UdDbmv0WAL1i",
        "outputId": "6eb02086-7c56-4f69-bdab-1ae4000d7d11"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(414,)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression"
      ],
      "metadata": {
        "id": "jJtKtYikANeK"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mlr = LinearRegression()"
      ],
      "metadata": {
        "id": "91RlZlSqARQj"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mlr.fit(features, target)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wSWe8xFRATc6",
        "outputId": "2d1e0e4c-fe50-47e0-e27e-bacc2d0d70aa"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"r^2 of the model = {0:.1f}%\".format(mlr.score(features, target)*100))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WmPpdUY-AcBn",
        "outputId": "495cbeed-c932-45ff-aff1-3c07a020dbc9"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "r^2 of the model = 55.5%\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mlr.intercept_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2B0zH--6AgQH",
        "outputId": "1f8f75a6-4d82-457e-a996-a8c54cfcb0e1"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-11588.747800126255"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mlr.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xOYz3SxFAk1h",
        "outputId": "c16135ba-c58d-4e41-f2b1-6d6eddfc46e9"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-2.54477973e-01,  1.25786410e+00,  5.77804282e+00, -5.51299698e-03])"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distance_nearest_MRT_station[\"prediction\"] = mlr.predict(features)"
      ],
      "metadata": {
        "id": "jzhoj6CiAnQq"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "distance_nearest_MRT_station.head"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WO85L0aUAs6a",
        "outputId": "eb83adc0-f9c4-4573-93d9-150521bb33fc"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<bound method NDFrame.head of      transaction_date  house_age  distance_nearest_MRT_station  \\\n",
              "0            2012.917       32.0                      84.87882   \n",
              "1            2012.917       19.5                     306.59470   \n",
              "2            2013.583       13.3                     561.98450   \n",
              "3            2013.500       13.3                     561.98450   \n",
              "4            2012.833        5.0                     390.56840   \n",
              "..                ...        ...                           ...   \n",
              "409          2013.000       13.7                    4082.01500   \n",
              "410          2012.667        5.6                      90.45606   \n",
              "411          2013.250       18.8                     390.96960   \n",
              "412          2013.000        8.1                     104.81010   \n",
              "413          2013.500        6.5                      90.45606   \n",
              "\n",
              "     convenience_stores  house_price_unit_area  prediction  \n",
              "0                    10                   37.9   45.940228  \n",
              "1                     9                   42.2   46.641020  \n",
              "2                     5                   47.3   45.627540  \n",
              "3                     5                   54.8   45.147963  \n",
              "4                     5                   43.1   44.351192  \n",
              "..                  ...                    ...         ...  \n",
              "409                   0                   15.4   16.461912  \n",
              "410                   9                   50.0   49.925324  \n",
              "411                   7                   40.6   45.762356  \n",
              "412                   5                   52.5   46.102628  \n",
              "413                   9                   63.9   54.509404  \n",
              "\n",
              "[414 rows x 6 columns]>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "distance_nearest_MRT_station.plot(\"house_price_unit_area\", \"prediction\", kind=\"scatter\", alpha = 0.5);"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 280
        },
        "id": "CK4TmhDYAwX3",
        "outputId": "de756ef6-29db-40f8-ff1f-84fd5a04c1e8"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features.hist();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 294
        },
        "id": "MR_EXogbA3sT",
        "outputId": "4de51edf-919d-427b-f2f0-80055ef80e17"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "target.hist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "jcTRPMt6A6X4",
        "outputId": "606af88a-9155-477a-da9c-0d19d129c378"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f6e9911c690>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "features_s = (features - features.mean()) / features.std()\n",
        "target_s = (target - target.mean()) / target.std()"
      ],
      "metadata": {
        "id": "YCvez1zBBAnV"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "features_s.hist();"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "07mSiiqCBD3o",
        "outputId": "459a4b5a-13d2-443d-a0a4-c2ee416e99bf"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "target_s.hist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 285
        },
        "id": "ci_Aat8JBHcC",
        "outputId": "aa608065-e344-43e0-9f4b-767a45875491"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f6e98d67bd0>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mlr_s = LinearRegression()"
      ],
      "metadata": {
        "id": "Yxc6mE51BKxY"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mlr_s.fit(features_s, target_s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wXpkFpMqBNvV",
        "outputId": "6014d82b-a00b-46cc-ca7d-7a19c1948bcd"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mlr.score(features, target)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "b3Yv9xDuBNx5",
        "outputId": "89e175ca-e7e9-422f-cf8b-86237544fe70"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5552973207362877"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mlr_s.score(features_s, target_s)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f5tt6VAnBUfz",
        "outputId": "f19d3561-d1fd-436e-b528-51c8a8bd56d9"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.5552973207362843"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mlr.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x60lBTPABWpn",
        "outputId": "cc313221-3ead-404d-d19b-1a7a366a5bd4"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-2.54477973e-01,  1.25786410e+00,  5.77804282e+00, -5.51299698e-03])"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mlr_s.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QYWujOwxBZvI",
        "outputId": "2c748bc7-3c31-461a-b71b-2baad2a5da67"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([-0.21307015,  0.27230513,  0.11973838, -0.51137417])"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import statsmodels.formula.api as smf"
      ],
      "metadata": {
        "id": "YFTBO4SbBb42"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = features_s\n",
        "df[\"target\"] = target_s"
      ],
      "metadata": {
        "id": "t8U4gKiFBeiR"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "kb59JAsOBhLb",
        "outputId": "25ca45fa-023d-4916-e71a-c87ddb26f5e1"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   house_age  convenience_stores  transaction_date  \\\n",
              "0   1.254111            2.004982         -0.822688   \n",
              "1   0.156896            1.665488         -0.822688   \n",
              "2  -0.387322            0.307513          1.539289   \n",
              "3  -0.387322            0.307513          1.244928   \n",
              "4  -1.115873            0.307513         -1.120595   \n",
              "\n",
              "   distance_nearest_MRT_station    target  \n",
              "0                     -0.791537 -0.005894  \n",
              "1                     -0.615866  0.310132  \n",
              "2                     -0.413515  0.684953  \n",
              "3                     -0.413515  1.236161  \n",
              "4                     -0.549332  0.376277  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aa6cbb23-98c1-43a6-ab76-96d5c8dd047c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>house_age</th>\n",
              "      <th>convenience_stores</th>\n",
              "      <th>transaction_date</th>\n",
              "      <th>distance_nearest_MRT_station</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.254111</td>\n",
              "      <td>2.004982</td>\n",
              "      <td>-0.822688</td>\n",
              "      <td>-0.791537</td>\n",
              "      <td>-0.005894</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.156896</td>\n",
              "      <td>1.665488</td>\n",
              "      <td>-0.822688</td>\n",
              "      <td>-0.615866</td>\n",
              "      <td>0.310132</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.387322</td>\n",
              "      <td>0.307513</td>\n",
              "      <td>1.539289</td>\n",
              "      <td>-0.413515</td>\n",
              "      <td>0.684953</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.387322</td>\n",
              "      <td>0.307513</td>\n",
              "      <td>1.244928</td>\n",
              "      <td>-0.413515</td>\n",
              "      <td>1.236161</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.115873</td>\n",
              "      <td>0.307513</td>\n",
              "      <td>-1.120595</td>\n",
              "      <td>-0.549332</td>\n",
              "      <td>0.376277</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aa6cbb23-98c1-43a6-ab76-96d5c8dd047c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-aa6cbb23-98c1-43a6-ab76-96d5c8dd047c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-aa6cbb23-98c1-43a6-ab76-96d5c8dd047c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = smf.ols(formula =\"target ~ house_age + convenience_stores + transaction_date + distance_nearest_MRT_station\", data=df)"
      ],
      "metadata": {
        "id": "uLZ53lmjBmOS"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "results = model.fit()"
      ],
      "metadata": {
        "id": "FBOX6FNZB5z6"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(results.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mewBCKLuB9A-",
        "outputId": "f5b06dda-fe45-4918-8946-6846dfa36ebe"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                            OLS Regression Results                            \n",
            "==============================================================================\n",
            "Dep. Variable:                 target   R-squared:                       0.555\n",
            "Model:                            OLS   Adj. R-squared:                  0.551\n",
            "Method:                 Least Squares   F-statistic:                     127.7\n",
            "Date:                Tue, 01 Nov 2022   Prob (F-statistic):           1.23e-70\n",
            "Time:                        01:07:13   Log-Likelihood:                -419.20\n",
            "No. Observations:                 414   AIC:                             848.4\n",
            "Df Residuals:                     409   BIC:                             868.5\n",
            "Df Model:                           4                                         \n",
            "Covariance Type:            nonrobust                                         \n",
            "================================================================================================\n",
            "                                   coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------------\n",
            "Intercept                    -4.429e-14      0.033  -1.34e-12      1.000      -0.065       0.065\n",
            "house_age                       -0.2131      0.033     -6.438      0.000      -0.278      -0.148\n",
            "convenience_stores               0.2723      0.042      6.558      0.000       0.191       0.354\n",
            "transaction_date                 0.1197      0.033      3.618      0.000       0.055       0.185\n",
            "distance_nearest_MRT_station    -0.5114      0.042    -12.305      0.000      -0.593      -0.430\n",
            "==============================================================================\n",
            "Omnibus:                      214.129   Durbin-Watson:                   2.115\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):             2979.678\n",
            "Skew:                           1.855   Prob(JB):                         0.00\n",
            "Kurtosis:                      15.609   Cond. No.                         2.03\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "mlr.intercept_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ur2VYBnhCI6M",
        "outputId": "210ec0bd-429f-43f5-eb3c-870b343ab54b"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-11588.747800126255"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    }
  ]
}